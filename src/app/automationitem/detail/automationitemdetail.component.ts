/*
 *author: Jewel Rana
 *this component is auto generated by Code Generator for Automation List
 *since 12th August 2020
 */

import { Component, OnInit } from "@angular/core";
import { ActivatedRoute } from "@angular/router";
import { Location } from "@angular/common";

import { HttpbaseService } from "../../common";
import { Automationitem } from "../dto/automationitem";
import { AutomationitemService } from "../service/automationitem.service";

import {FormArray, FormBuilder, FormGroup, Validators} from '@angular/forms';
import { AlertService } from "../../alert/_services";

@Component({
  selector: "app-automationitemdetail",
  templateUrl: "./automationitemdetail.component.html",
  styleUrls: ["./automationitemdetail.component.css"],
})
export class AutomationitemdetailComponent implements OnInit {
  selectedId: number;
  automationitem: Automationitem = {
    componentId: -1,
    uniqueCode: "",
    status: 0,
    version: 0,
    csrfNonce: "",
    operation: "",
    automationId: "",
    automationName: "",
    automationCriteria: "",
    development: "",
    isActive: false,
    remarks: "",
    contacts: "",
    contactEmails: ""
  };


  automationitemdetailForm: FormGroup;
  isSubmitted = false;
  isFormCheckRequired = false;

  constructor(
    private formBuilder: FormBuilder,
    private route: ActivatedRoute,
    private location: Location,
    private automationitemService: AutomationitemService,
    private alertService: AlertService,
    private httpbaseService: HttpbaseService
  ) {}

  ngOnInit(): void {
    this.getAutomationitemDetail();
    this.automationitemdetailForm = this.formBuilder.group({
      csrfNonce: [],
      automationId: ["", Validators.required],
      automationName: ["", Validators.required],
      automationCriteria: [""],
      development: [""],
      isActive: [false],
      remarks: [""],
      addresses: this.formBuilder.array([
        this.initAddress(),
      ])

    });
  }

  initAddress() {
    return this.formBuilder.group({
      name: ['', Validators.required],
      email: ['',Validators.required]
    });
  }

  addAddress() {
    //const control = <FormArray>this.automationitemdetailForm.controls['addresses'];
    const control = <FormArray>this.automationitemdetailForm.controls.addresses;
    control.push(this.initAddress());
  }

  removeAddress(i: number) {
    //const control = <FormArray>this.automationitemdetailForm.controls['addresses'];
    const control = <FormArray>this.automationitemdetailForm.controls.addresses;
    control.removeAt(i);
  }

  // convenience getter for easy access to form fields
  get f() {
    return this.automationitemdetailForm.controls;
  }

  getAutomationitemDetail(): void {
    const id = +this.route.snapshot.paramMap.get("id");
    this.selectedId = id;
    this.getAutomationitemData();
  }

  onSubmit() {
    //if a previous submission is still on going then do nothing. just return.
    this.automationitem.contacts = "";
    this.automationitem.contactEmails = "";
    let addressLength = this.automationitemdetailForm.controls['addresses'].value.length;
    <FormArray>this.automationitemdetailForm.controls['addresses'].value.forEach(x => {
      if(addressLength==x+1) {
        this.automationitem.contacts += x.name;
        this.automationitem.contactEmails += x.email;
      }
      else {
        this.automationitem.contacts += x.name+",";
        this.automationitem.contactEmails += x.email+",";
      }

    });

   // console.log("hhhhhhhh"+this.automationitem.contacts+"kkkkkk"+this.automationitem.contactEmails);
    this.automationitemdetailForm['']
    if (this.isSubmitted) {
      return;
    }

    this.isFormCheckRequired = true;

    // stop here if form is invalid
    if (this.automationitemdetailForm.invalid) {
      return;
    }

    this.isSubmitted = true;
    this.saveAutomationitem();
    this.automationitem.contactEmails = "";
    this.automationitem.contacts = "";
  }

  onDelete() {
    //if a previous submission is still on going then do nothing. just return.
    if (this.isSubmitted) {
      return;
    }

    var result = confirm(
      "Realy want to delete automationitem '" +
        this.automationitem.uniqueCode +
        "'?"
    );
    if (result) {
      this.isSubmitted = true;
      this.deleteAutomationitem();
    }
  }

  goBack(): void {
    this.location.back();
  }

  private getAutomationitemData() {
    if (this.selectedId <= 0) {
      //this is new form, so loading nonce
      this.loadCSRFNonce();
      //and return from here.
      return;
    }

    this.automationitemService
      .getAutomationitemById(this.selectedId)
      .subscribe((apiResponse) => {
        this.loadAutomationitemData(apiResponse);
      });
  }



  private loadAutomationitemData(apiResponse) {
    if (apiResponse.success) {
      this.automationitem = Object.assign(<Automationitem>{}, apiResponse.data);
      const contacts = this.automationitem.contacts.split(",");
      const contactEmails = this.automationitem.contactEmails.split(",");
      const control = <FormArray>this.automationitemdetailForm.controls['addresses'];
      let atleastOne = false;
      for(let i= 0;i<contacts.length;i++) {
        if(contacts[i] || contactEmails[i] ) {
          atleastOne = true;
          control.push(this.formBuilder.group({
            name: [contacts[i], Validators.required],
            email: [contactEmails[i],Validators.required]
          }));
        }
      }
      if(atleastOne) {
        this.removeAddress(0);
      }

    } else {
      this.alertService.error(apiResponse.message);
    }
  }

  private saveAutomationitem() {
    this.automationitem.uniqueCode = this.automationitem.automationName;
    this.automationitemService
      .saveAutomationitem(this.automationitem)
      .subscribe((apiResponse) => {
        if (apiResponse.success) {
          this.isSubmitted = false;
          this.isFormCheckRequired = false;
          if (
            this.automationitem.componentId == undefined ||
            this.automationitem.componentId <= 0
          ) {
            this.automationitemdetailForm.reset();
            //this is new form after reset, so loading new nonce
            this.loadCSRFNonce();
          }
          this.alertService.success(apiResponse.message);
        } else {
          this.alertService.error(apiResponse.message);
        }
      });
  }

  private deleteAutomationitem() {
    this.automationitemService
      .deleteAutomationitem(this.automationitem)
      .subscribe((apiResponse) => {
        this.isSubmitted = false;
        if (apiResponse.success) {
          this.alertService.success(apiResponse.message);
          this.goBack();
        } else {
          this.alertService.error(apiResponse.message);
        }
      });
  }

  private loadCSRFNonce() {
    this.httpbaseService.getCSRFNonce().subscribe((response) => {
      if (response.success) {
        this.automationitem.csrfNonce =
          response.data == null || response.data == undefined
            ? ""
            : response.data.toString();
        //console.log('AutomationitemdetailComponent: received csrf nonce = ' + this.automationitem.csrfNonce);
      } else {
        console.error(
          "AutomationitemdetailComponent: csrf nonce is not recieved from server"
        );
      }
    });
  }
}
